{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd, numpy as np\n","import gzip\n","import os\n","import json\n","from tqdm import tqdm\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from google.colab import files\n","import random\n","import ast\n","from collections import defaultdict\n","\n","from IPython.display import display, HTML\n","display(HTML(\"<style>.container { width:100% !important; }</style>\"))\n","display(HTML(\"<style>.output_result { max-width:100% !important; }</style>\"))\n","\n","from google.colab import data_table\n","data_table.enable_dataframe_formatter()\n"],"metadata":{"id":"JV-wdNKgedC4","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1701835695635,"user_tz":480,"elapsed":1814,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"fdc69877-c5a9-42ef-9162-07574c0e501d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<style>.container { width:100% !important; }</style>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<style>.output_result { max-width:100% !important; }</style>"]},"metadata":{}}]},{"cell_type":"code","source":["df = pd.read_csv('data/cleaned_df.csv')\n"],"metadata":{"id":"UwM1AgKu_Gym"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['cat'] = df['cat'].apply(lambda x: ast.literal_eval(x))"],"metadata":{"id":"kzIjOcTbm936"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import Counter\n","\n","# Assuming 'df' is your DataFrame and 'cat' is the column with sets of categories\n","category_counts = Counter()\n","\n","for categories in df['cat']:\n","\n","    category_counts.update(categories)\n","\n","# Now category_counts has the occurrences of each category"],"metadata":{"id":"vm_82CxBT3Mv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Select the top 1000 categories\n","\n","# Remove the empty category\n","top_1000_categories = {category for category, count in category_counts.most_common(1001)}.difference({''})\n","len(top_1000_categories)"],"metadata":{"id":"8Z8FnLJ1T2aQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701835779405,"user_tz":480,"elapsed":2,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"98ebb722-b107-49b7-bfdc-f2b84c50bb49"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["userIDs,itemIDs = {},{}\n","users, items = {}, {}\n","\n","for u,i,r in interactions:\n","    if not u in userIDs: userIDs[u] = len(userIDs)\n","    if not i in itemIDs: itemIDs[i] = len(itemIDs)\n","\n","    if not u in users: users[len(users)] = u\n","    if not i in items: items[len(items)] = i\n","\n","nUsers,nItems = len(userIDs),len(itemIDs)"],"metadata":{"id":"GgLkcQmrgzFY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","def convert_to_category_index(categories, top_categories):\n","    \"\"\"Convert a set of categories to a set of category indices.\"\"\"\n","    result_list = []\n","    for i, category in enumerate(top_categories):\n","        if category in categories:\n","            result_list.append(i)\n","    return result_list\n","\n","def convert_to_embedding(categories, top_categories):\n","    \"\"\"Convert a set of categories to a 1000-dimensional embedding.\"\"\"\n","    return np.array([int(category in categories) for category in top_categories])\n"],"metadata":{"id":"Jv3gouLXT2W5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Apply the conversion to each row\n","df['embedding'] = df['cat'].apply(lambda categories: convert_to_embedding(categories, top_1000_categories))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"goLbd19aeb3H","executionInfo":{"status":"error","timestamp":1701838592733,"user_tz":480,"elapsed":39567,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"cfd52630-2e01-408f-c955-980a6609e1e2"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-6e3eb95470f9>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Apply the conversion to each row\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'embedding'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'cat'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mcategories\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mconvert_to_embedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop_1000_categories\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4769\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4770\u001b[0m         \"\"\"\n\u001b[0;32m-> 4771\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mSeriesApply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert_dtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4772\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4773\u001b[0m     def _reduce(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1122\u001b[0m         \u001b[0;31m# self.f is Callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1123\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1125\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0magg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1172\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1173\u001b[0m                 \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1174\u001b[0;31m                 mapped = lib.map_infer(\n\u001b[0m\u001b[1;32m   1175\u001b[0m                     \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1176\u001b[0m                     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-26-6e3eb95470f9>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(categories)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Apply the conversion to each row\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'embedding'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'cat'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mcategories\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mconvert_to_embedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop_1000_categories\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-23-112cd7b9c7b0>\u001b[0m in \u001b[0;36mconvert_to_embedding\u001b[0;34m(categories, top_categories)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mconvert_to_embedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop_categories\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;34m\"\"\"Convert a set of categories to a 1000-dimensional embedding.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategory\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcategories\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcategory\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtop_categories\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-23-112cd7b9c7b0>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mconvert_to_embedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtop_categories\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;34m\"\"\"Convert a set of categories to a 1000-dimensional embedding.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcategory\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcategories\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcategory\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtop_categories\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["df['category_indices'] = df['cat'].apply(lambda categories: convert_to_category_index(categories, top_1000_categories))"],"metadata":{"id":"BTp4e82ceaGX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['user_id'] = df['reviewerID'].apply(lambda r : userIDs[r])"],"metadata":{"id":"TXlLVLB_gd-F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.sort_values(by=['user_id','unixReviewTime'], inplace=True)"],"metadata":{"id":"qJbbX77_f2-V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["user_categories_arr = df[['user_id','category_indices']].values"],"metadata":{"id":"qB9y5aqtgIyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["user_series = {}\n","current_user_id = 0\n","start_index = 0\n","seq = []\n","\n","for i, row in enumerate(user_categories_arr):\n","    user_id, category_indices = row[0], row[1]\n","\n","    if user_id != current_user_id:\n","        user_series[current_user_id] = seq\n","        current_user_id = user_id\n","        seq = []\n","        start_index = i\n","\n","    seq.append(category_indices)\n","\n","if current_user_id is not None:\n","    user_series[current_user_id] = seq"],"metadata":{"id":"Mc7cY4EvhssS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["user_series = {}\n","current_user_id = 0\n","start_index = 0\n","\n","for i, row in enumerate(arr_sorted):\n","    user_id = row[0]\n","\n","    if user_id != current_user_id:\n","\n","        seq = arr[start_index:i,2]\n","        seq_lag = np.diff(seq)\n","        seq_lag = np.append(seq_lag, 0)\n","        # print(seq_lag.reshape(-1,1).shape)\n","        # print(arr[start_index:i,3:].shape)\n","        user_series[current_user_id] = arr[start_index:i,3:]\n","\n","        current_user_id = user_id\n","\n","        start_index = i\n","\n","if current_user_id is not None:\n","    seq = arr[start_index:i,2]\n","    seq_lag = np.diff(seq)\n","    seq_lag = np.append(seq_lag, 0)\n","\n","    user_series[current_user_id] = arr[start_index:i,3:]"],"metadata":{"id":"vrVU1pSefwzh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['embedding'] = df['embedding'].apply(lambda x: list(x))"],"metadata":{"id":"jTI1ZEu3jP3x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["asin_to_embedding = df[['asin','embedding']].groupby(by='asin').first()"],"metadata":{"id":"XLo9bvzGjWSu","colab":{"base_uri":"https://localhost:8080/","height":493},"executionInfo":{"status":"ok","timestamp":1701836067184,"user_tz":480,"elapsed":1134,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"60d5a62a-c50a-4532-c356-25db34873c85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Warning: total number of rows (291779) exceeds max_rows (20000). Falling back to pandas display.\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                    embedding\n","asin                                                         \n","0000031887  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","000100039X  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","0002005395  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","0002007770  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","0002051850  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","...                                                       ...\n","B00LMZPNI6  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","B00LNBSJZS  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","B00LNLDRBY  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","B00LNLVLN0  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","B00LNU0V5K  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n","\n","[291779 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-cc8e835f-6575-44af-8a07-4822ec1bfa7e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>embedding</th>\n","    </tr>\n","    <tr>\n","      <th>asin</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0000031887</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>000100039X</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>0002005395</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>0002007770</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>0002051850</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>B00LMZPNI6</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>B00LNBSJZS</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>B00LNLDRBY</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>B00LNLVLN0</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>B00LNU0V5K</th>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>291779 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc8e835f-6575-44af-8a07-4822ec1bfa7e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cc8e835f-6575-44af-8a07-4822ec1bfa7e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cc8e835f-6575-44af-8a07-4822ec1bfa7e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f02a3ecd-ec94-42b0-a4ee-775cc1b8eb51\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f02a3ecd-ec94-42b0-a4ee-775cc1b8eb51')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f02a3ecd-ec94-42b0-a4ee-775cc1b8eb51 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a6ce12f9-9f49-42c6-b7d4-2afe4e9d6d8a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('asin_to_embedding')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a6ce12f9-9f49-42c6-b7d4-2afe4e9d6d8a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('asin_to_embedding');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["embedding_arr = np.stack(list(asin_to_embedding['embedding']), axis=0)"],"metadata":{"id":"MEuJbIPRVaK5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.savez('data/embedding_array.npz', embedding_arr=embedding_arr)"],"metadata":{"id":"6taei_BUVwz2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["user_id_arr = np.array(df['reviewerID'].apply(lambda r : userIDs[r]))"],"metadata":{"id":"mha0Y9Anb8DK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701655382003,"user_tz":480,"elapsed":412,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"c4241ae4-99d5-4478-9456-f8d3afd3f0f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1099170,)"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["item_id_arr = np.array(df['asin'].apply(lambda r : itemIDs[r]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_PjSMnQWjiPn","executionInfo":{"status":"ok","timestamp":1701655383996,"user_tz":480,"elapsed":415,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"bea08dab-5250-42b5-c814-ed8a24b4665b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1099170,)"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["timestamps = pd.to_datetime(df['unixReviewTime']).apply(lambda d : d.timestamp())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GsXpfDQMkLsh","executionInfo":{"status":"ok","timestamp":1701655681972,"user_tz":480,"elapsed":3894,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"58556933-3324-43b9-c3c5-a7bc412d312c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1099170,)"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["temp = np.stack([user_id_arr, item_id_arr, timestamps], axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mF_YsGdvlNV8","executionInfo":{"status":"ok","timestamp":1701655758117,"user_tz":480,"elapsed":321,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"7ae89ebe-d817-4846-e30c-9f6a323dee54"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1099170, 3)"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["feature_arr = np.hstack([temp.astype(np.int32), arr.astype(np.int32)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZS4NegpolNO1","executionInfo":{"status":"ok","timestamp":1701656024803,"user_tz":480,"elapsed":9408,"user":{"displayName":"James Ding","userId":"04270369624066402842"}},"outputId":"eb3d664e-a971-4ce4-f836-099fff7310d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1099170, 1003)"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["np.savez('data/feature_array.npz', feature_arr=feature_arr)"],"metadata":{"id":"0VCjk-Kdjz8f"},"execution_count":null,"outputs":[]}]}